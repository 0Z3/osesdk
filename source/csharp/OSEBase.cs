//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class OSEBase : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal OSEBase(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(OSEBase obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(OSEBase obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~OSEBase() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libosePINVOKE.delete_OSEBase(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public string bytes {
    set {
      libosePINVOKE.OSEBase_bytes_set(swigCPtr, value);
    } 
    get {
      string ret = libosePINVOKE.OSEBase_bytes_get(swigCPtr);
      return ret;
    } 
  }

  public ose_bundle bundle {
    set {
      libosePINVOKE.OSEBase_bundle_set(swigCPtr, ose_bundle.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libosePINVOKE.OSEBase_bundle_get(swigCPtr);
      ose_bundle ret = (cPtr == global::System.IntPtr.Zero) ? null : new ose_bundle(cPtr, false);
      return ret;
    } 
  }

  public ose_bundle osevm {
    set {
      libosePINVOKE.OSEBase_osevm_set(swigCPtr, ose_bundle.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libosePINVOKE.OSEBase_osevm_get(swigCPtr);
      ose_bundle ret = (cPtr == global::System.IntPtr.Zero) ? null : new ose_bundle(cPtr, false);
      return ret;
    } 
  }

  public ose_bundle vm_i {
    set {
      libosePINVOKE.OSEBase_vm_i_set(swigCPtr, ose_bundle.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libosePINVOKE.OSEBase_vm_i_get(swigCPtr);
      ose_bundle ret = (cPtr == global::System.IntPtr.Zero) ? null : new ose_bundle(cPtr, false);
      return ret;
    } 
  }

  public ose_bundle vm_s {
    set {
      libosePINVOKE.OSEBase_vm_s_set(swigCPtr, ose_bundle.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libosePINVOKE.OSEBase_vm_s_get(swigCPtr);
      ose_bundle ret = (cPtr == global::System.IntPtr.Zero) ? null : new ose_bundle(cPtr, false);
      return ret;
    } 
  }

  public ose_bundle vm_e {
    set {
      libosePINVOKE.OSEBase_vm_e_set(swigCPtr, ose_bundle.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libosePINVOKE.OSEBase_vm_e_get(swigCPtr);
      ose_bundle ret = (cPtr == global::System.IntPtr.Zero) ? null : new ose_bundle(cPtr, false);
      return ret;
    } 
  }

  public ose_bundle vm_c {
    set {
      libosePINVOKE.OSEBase_vm_c_set(swigCPtr, ose_bundle.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libosePINVOKE.OSEBase_vm_c_get(swigCPtr);
      ose_bundle ret = (cPtr == global::System.IntPtr.Zero) ? null : new ose_bundle(cPtr, false);
      return ret;
    } 
  }

  public ose_bundle vm_d {
    set {
      libosePINVOKE.OSEBase_vm_d_set(swigCPtr, ose_bundle.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libosePINVOKE.OSEBase_vm_d_get(swigCPtr);
      ose_bundle ret = (cPtr == global::System.IntPtr.Zero) ? null : new ose_bundle(cPtr, false);
      return ret;
    } 
  }

  public ose_bundle vm_x {
    set {
      libosePINVOKE.OSEBase_vm_x_set(swigCPtr, ose_bundle.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libosePINVOKE.OSEBase_vm_x_get(swigCPtr);
      ose_bundle ret = (cPtr == global::System.IntPtr.Zero) ? null : new ose_bundle(cPtr, false);
      return ret;
    } 
  }

  public virtual void init() {
    if (SwigDerivedClassHasMethod("init", swigMethodTypes0)) libosePINVOKE.OSEBase_initSwigExplicitOSEBase(swigCPtr); else libosePINVOKE.OSEBase_init(swigCPtr);
  }

  public SWIGTYPE_p_void getself() {
    global::System.IntPtr cPtr = libosePINVOKE.OSEBase_getself(swigCPtr);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public virtual SWIGTYPE_p_void getfnptr(string fname) {
    global::System.IntPtr cPtr = (SwigDerivedClassHasMethod("getfnptr", swigMethodTypes1) ? libosePINVOKE.OSEBase_getfnptrSwigExplicitOSEBase(swigCPtr, fname) : libosePINVOKE.OSEBase_getfnptr(swigCPtr, fname));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_unsigned_char copyElem(byte[] dest, ose_bundle reg, int offset, int size) {
    global::System.IntPtr cPtr = libosePINVOKE.OSEBase_copyElem(swigCPtr, dest, ose_bundle.getCPtr(reg), offset, size);
    SWIGTYPE_p_unsigned_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void run() {
    libosePINVOKE.OSEBase_run(swigCPtr);
  }

  public void input(int len, byte[] packet) {
    libosePINVOKE.OSEBase_input(swigCPtr, len, packet);
  }

  public OSEBase() : this(libosePINVOKE.new_OSEBase(), true) {
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("init", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateOSEBase_0(SwigDirectorMethodinit);
    if (SwigDerivedClassHasMethod("getfnptr", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateOSEBase_1(SwigDirectorMethodgetfnptr);
    libosePINVOKE.OSEBase_director_connect(swigCPtr, swigDelegate0, swigDelegate1);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo[] methodInfos = this.GetType().GetMethods(
        global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance);
    foreach (global::System.Reflection.MethodInfo methodInfo in methodInfos) {
      if (methodInfo.DeclaringType == null)
        continue;

      if (methodInfo.Name != methodName)
        continue;

      var parameters = methodInfo.GetParameters();
      if (parameters.Length != methodTypes.Length)
        continue;

      bool parametersMatch = true;
      for (var i = 0; i < parameters.Length; i++) {
        if (parameters[i].ParameterType != methodTypes[i]) {
          parametersMatch = false;
          break;
        }
      }

      if (!parametersMatch)
        continue;

      if (methodInfo.IsVirtual && (methodInfo.DeclaringType.IsSubclassOf(typeof(OSEBase))) &&
        methodInfo.DeclaringType != methodInfo.GetBaseDefinition().DeclaringType) {
        return true;
      }
    }

    return false;
  }

  private void SwigDirectorMethodinit() {
    init();
  }

  private global::System.IntPtr SwigDirectorMethodgetfnptr(string fname) {
    return SWIGTYPE_p_void.getCPtr(getfnptr(fname)).Handle;
  }

  public delegate void SwigDelegateOSEBase_0();
  public delegate global::System.IntPtr SwigDelegateOSEBase_1(string fname);

  private SwigDelegateOSEBase_0 swigDelegate0;
  private SwigDelegateOSEBase_1 swigDelegate1;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(string) };
}
