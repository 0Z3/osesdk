//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class libose {
  public static int htonl(int x) {
    int ret = libosePINVOKE.htonl(x);
    return ret;
  }

  public static int ntohl(int x) {
    int ret = libosePINVOKE.ntohl(x);
    return ret;
  }

  public static ose_bundle ose_makeBundle(string p) {
    ose_bundle ret = new ose_bundle(libosePINVOKE.ose_makeBundle(p), true);
    return ret;
  }

  public static char OSETT_ID {
    get {
      char ret = libosePINVOKE.OSETT_ID_get();
      return ret;
    } 
  }

  public static string OSETTSTR_ID {
    get {
      string ret = libosePINVOKE.OSETTSTR_ID_get();
      return ret;
    } 
  }

  public static char OSETT_INT32 {
    get {
      char ret = libosePINVOKE.OSETT_INT32_get();
      return ret;
    } 
  }

  public static string OSETTSTR_INT32 {
    get {
      string ret = libosePINVOKE.OSETTSTR_INT32_get();
      return ret;
    } 
  }

  public static char OSETT_FLOAT {
    get {
      char ret = libosePINVOKE.OSETT_FLOAT_get();
      return ret;
    } 
  }

  public static string OSETTSTR_FLOAT {
    get {
      string ret = libosePINVOKE.OSETTSTR_FLOAT_get();
      return ret;
    } 
  }

  public static char OSETT_STRING {
    get {
      char ret = libosePINVOKE.OSETT_STRING_get();
      return ret;
    } 
  }

  public static string OSETTSTR_STRING {
    get {
      string ret = libosePINVOKE.OSETTSTR_STRING_get();
      return ret;
    } 
  }

  public static char OSETT_BLOB {
    get {
      char ret = libosePINVOKE.OSETT_BLOB_get();
      return ret;
    } 
  }

  public static string OSETTSTR_BLOB {
    get {
      string ret = libosePINVOKE.OSETTSTR_BLOB_get();
      return ret;
    } 
  }

  public static char OSETT_TRUE {
    get {
      char ret = libosePINVOKE.OSETT_TRUE_get();
      return ret;
    } 
  }

  public static string OSETTSTR_TRUE {
    get {
      string ret = libosePINVOKE.OSETTSTR_TRUE_get();
      return ret;
    } 
  }

  public static char OSETT_FALSE {
    get {
      char ret = libosePINVOKE.OSETT_FALSE_get();
      return ret;
    } 
  }

  public static string OSETTSTR_FALSE {
    get {
      string ret = libosePINVOKE.OSETTSTR_FALSE_get();
      return ret;
    } 
  }

  public static char OSETT_NOTYPETAG {
    get {
      char ret = libosePINVOKE.OSETT_NOTYPETAG_get();
      return ret;
    } 
  }

  public static string OSETTSTR_NOTYPETAG {
    get {
      string ret = libosePINVOKE.OSETTSTR_NOTYPETAG_get();
      return ret;
    } 
  }

  public static char OSETT_BUNDLE {
    get {
      char ret = libosePINVOKE.OSETT_BUNDLE_get();
      return ret;
    } 
  }

  public static string OSETTSTR_BUNDLE {
    get {
      string ret = libosePINVOKE.OSETTSTR_BUNDLE_get();
      return ret;
    } 
  }

  public static char OSETT_MESSAGE {
    get {
      char ret = libosePINVOKE.OSETT_MESSAGE_get();
      return ret;
    } 
  }

  public static string OSETTSTR_MESSAGE {
    get {
      string ret = libosePINVOKE.OSETTSTR_MESSAGE_get();
      return ret;
    } 
  }

  public static char OSETT_ALIGNEDPTR {
    get {
      char ret = libosePINVOKE.OSETT_ALIGNEDPTR_get();
      return ret;
    } 
  }

  public static string OSETTSTR_ALIGNEDPTR {
    get {
      string ret = libosePINVOKE.OSETTSTR_ALIGNEDPTR_get();
      return ret;
    } 
  }

  public static string OSE_BUNDLE_ID {
    get {
      string ret = libosePINVOKE.OSE_BUNDLE_ID_get();
      return ret;
    } 
  }

  public static int OSE_BUNDLE_ID_LEN {
    get {
      int ret = libosePINVOKE.OSE_BUNDLE_ID_LEN_get();
      return ret;
    } 
  }

  public static string OSE_TIMETAG_NULL {
    get {
      string ret = libosePINVOKE.OSE_TIMETAG_NULL_get();
      return ret;
    } 
  }

  public static int OSE_TIMETAG_LEN {
    get {
      int ret = libosePINVOKE.OSE_TIMETAG_LEN_get();
      return ret;
    } 
  }

  public static string OSE_BUNDLE_HEADER {
    get {
      string ret = libosePINVOKE.OSE_BUNDLE_HEADER_get();
      return ret;
    } 
  }

  public static int OSE_BUNDLE_HEADER_LEN {
    get {
      int ret = libosePINVOKE.OSE_BUNDLE_HEADER_LEN_get();
      return ret;
    } 
  }

  public static string OSE_EMPTY_TYPETAG_STRING {
    get {
      string ret = libosePINVOKE.OSE_EMPTY_TYPETAG_STRING_get();
      return ret;
    } 
  }

  public static int OSE_EMPTY_TYPETAG_STRING_LEN {
    get {
      int ret = libosePINVOKE.OSE_EMPTY_TYPETAG_STRING_LEN_get();
      return ret;
    } 
  }

  public static int OSE_EMPTY_TYPETAG_STRING_SIZE {
    get {
      int ret = libosePINVOKE.OSE_EMPTY_TYPETAG_STRING_SIZE_get();
      return ret;
    } 
  }

  public static string OSE_ADDRESS_ANONVAL {
    get {
      string ret = libosePINVOKE.OSE_ADDRESS_ANONVAL_get();
      return ret;
    } 
  }

  public static int OSE_ADDRESS_ANONVAL_LEN {
    get {
      int ret = libosePINVOKE.OSE_ADDRESS_ANONVAL_LEN_get();
      return ret;
    } 
  }

  public static int OSE_ADDRESS_ANONVAL_SIZE {
    get {
      int ret = libosePINVOKE.OSE_ADDRESS_ANONVAL_SIZE_get();
      return ret;
    } 
  }

  public static string OSE_ADDRESS_ANONVAL_EMPTY_TYPETAG_STRING {
    get {
      string ret = libosePINVOKE.OSE_ADDRESS_ANONVAL_EMPTY_TYPETAG_STRING_get();
      return ret;
    } 
  }

  public static int OSE_ADDRESS_MIN_LEN {
    get {
      int ret = libosePINVOKE.OSE_ADDRESS_MIN_LEN_get();
      return ret;
    } 
  }

  public static int OSE_ADDRESS_MIN_PLEN {
    get {
      int ret = libosePINVOKE.OSE_ADDRESS_MIN_PLEN_get();
      return ret;
    } 
  }

  public static string OSE_PPRINTPAYLOADITEM_ADDR {
    get {
      string ret = libosePINVOKE.OSE_PPRINTPAYLOADITEM_ADDR_get();
      return ret;
    } 
  }

  public static int OSE_PPRINTPAYLOADITEM_ADDR_LEN {
    get {
      int ret = libosePINVOKE.OSE_PPRINTPAYLOADITEM_ADDR_LEN_get();
      return ret;
    } 
  }

  public static string OSE_GETPAYLOADITEMLENGTH_ADDR {
    get {
      string ret = libosePINVOKE.OSE_GETPAYLOADITEMLENGTH_ADDR_get();
      return ret;
    } 
  }

  public static int OSE_GETPAYLOADITEMLENGTH_ADDR_LEN {
    get {
      int ret = libosePINVOKE.OSE_GETPAYLOADITEMLENGTH_ADDR_LEN_get();
      return ret;
    } 
  }

  public static string OSE_GETPAYLOADITEMSIZE_ADDR {
    get {
      string ret = libosePINVOKE.OSE_GETPAYLOADITEMSIZE_ADDR_get();
      return ret;
    } 
  }

  public static int OSE_GETPAYLOADITEMSIZE_ADDR_LEN {
    get {
      int ret = libosePINVOKE.OSE_GETPAYLOADITEMSIZE_ADDR_LEN_get();
      return ret;
    } 
  }

  public static string ose_version_string() {
    string ret = libosePINVOKE.ose_version_string();
    return ret;
  }

  public static string ose_debug_string() {
    string ret = libosePINVOKE.ose_debug_string();
    return ret;
  }

  public static string ose_date_compiled_string() {
    string ret = libosePINVOKE.ose_date_compiled_string();
    return ret;
  }

  public static int OSEVM_INPUT_SIZE {
    get {
      int ret = libosePINVOKE.OSEVM_INPUT_SIZE_get();
      return ret;
    } 
  }

  public static int OSEVM_STACK_SIZE {
    get {
      int ret = libosePINVOKE.OSEVM_STACK_SIZE_get();
      return ret;
    } 
  }

  public static int OSEVM_ENV_SIZE {
    get {
      int ret = libosePINVOKE.OSEVM_ENV_SIZE_get();
      return ret;
    } 
  }

  public static int OSEVM_CONTROL_SIZE {
    get {
      int ret = libosePINVOKE.OSEVM_CONTROL_SIZE_get();
      return ret;
    } 
  }

  public static int OSEVM_DUMP_SIZE {
    get {
      int ret = libosePINVOKE.OSEVM_DUMP_SIZE_get();
      return ret;
    } 
  }

  public static int OSEVM_TOTAL_SIZE {
    get {
      int ret = libosePINVOKE.OSEVM_TOTAL_SIZE_get();
      return ret;
    } 
  }

  public static void ose_context_set_status(ose_bundle b, int s) {
    libosePINVOKE.ose_context_set_status(ose_bundle.getCPtr(b), s);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static int ose_context_get_status(ose_bundle b) {
    int ret = libosePINVOKE.ose_context_get_status(ose_bundle.getCPtr(b));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ose_readSize(ose_bundle bundle) {
    int ret = libosePINVOKE.ose_readSize(ose_bundle.getCPtr(bundle));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ose_init(ose_bundle bundle, int size, string address) {
    int ret = libosePINVOKE.ose_init(ose_bundle.getCPtr(bundle), size, address);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ose_pushContextMessage(ose_bundle bundle, int size, string address) {
    int ret = libosePINVOKE.ose_pushContextMessage(ose_bundle.getCPtr(bundle), size, address);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void ose_dropContextMessage(ose_bundle bundle) {
    libosePINVOKE.ose_dropContextMessage(ose_bundle.getCPtr(bundle));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static int ose_spaceAvailable(ose_bundle bundle) {
    int ret = libosePINVOKE.ose_spaceAvailable(ose_bundle.getCPtr(bundle));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ose_getContextMessageOffset(ose_bundle bundle, string address) {
    int ret = libosePINVOKE.ose_getContextMessageOffset(ose_bundle.getCPtr(bundle), address);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ose_bundle ose_enterBundleAtOffset(ose_bundle bundle, int offset) {
    ose_bundle ret = new ose_bundle(libosePINVOKE.ose_enterBundleAtOffset(ose_bundle.getCPtr(bundle), offset), true);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ose_bundle ose_enter(ose_bundle bundle, string address) {
    ose_bundle ret = new ose_bundle(libosePINVOKE.ose_enter(ose_bundle.getCPtr(bundle), address), true);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ose_bundle ose_exit(ose_bundle bundle) {
    ose_bundle ret = new ose_bundle(libosePINVOKE.ose_exit(ose_bundle.getCPtr(bundle)), true);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void ose_addToSize(ose_bundle bundle, int amt) {
    libosePINVOKE.ose_addToSize(ose_bundle.getCPtr(bundle), amt);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_incSize(ose_bundle bundle, int amt) {
    libosePINVOKE.ose_incSize(ose_bundle.getCPtr(bundle), amt);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_decSize(ose_bundle bundle, int amt) {
    libosePINVOKE.ose_decSize(ose_bundle.getCPtr(bundle), amt);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_copyBundle(ose_bundle src, ose_bundle dest) {
    libosePINVOKE.ose_copyBundle(ose_bundle.getCPtr(src), ose_bundle.getCPtr(dest));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_appendBundle(ose_bundle src, ose_bundle dest) {
    libosePINVOKE.ose_appendBundle(ose_bundle.getCPtr(src), ose_bundle.getCPtr(dest));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_replaceBundle(ose_bundle src, ose_bundle dest) {
    libosePINVOKE.ose_replaceBundle(ose_bundle.getCPtr(src), ose_bundle.getCPtr(dest));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_copyElemAtOffset(int srcoffset, ose_bundle src, ose_bundle dest) {
    libosePINVOKE.ose_copyElemAtOffset(srcoffset, ose_bundle.getCPtr(src), ose_bundle.getCPtr(dest));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static int ose_routeElemAtOffset(int srcoffset, ose_bundle src, int prefixlen, ose_bundle dest) {
    int ret = libosePINVOKE.ose_routeElemAtOffset(srcoffset, ose_bundle.getCPtr(src), prefixlen, ose_bundle.getCPtr(dest));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ose_bundle ose_newBundleFromCBytes(int nbytes, string bytes) {
    ose_bundle ret = new ose_bundle(libosePINVOKE.ose_newBundleFromCBytes(nbytes, bytes), true);
    return ret;
  }

  public static ose_match_retval ose_match_pattern(string pattern, string address, SWIGTYPE_p_int pattern_offset, SWIGTYPE_p_int address_offset) {
    ose_match_retval ret = (ose_match_retval)libosePINVOKE.ose_match_pattern(pattern, address, SWIGTYPE_p_int.getCPtr(pattern_offset), SWIGTYPE_p_int.getCPtr(address_offset));
    return ret;
  }

  public static int ose_pprintBundleElem_msg(ose_bundle bundle, int offset, string buf, int buflen, int indent) {
    int ret = libosePINVOKE.ose_pprintBundleElem_msg(ose_bundle.getCPtr(bundle), offset, buf, buflen, indent);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ose_pprintBundle(ose_bundle bundle, string buf, int buflen) {
    int ret = libosePINVOKE.ose_pprintBundle(ose_bundle.getCPtr(bundle), buf, buflen);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ose_pprintFullBundle_impl(ose_bundle bundle, string buf, int buflen, string name) {
    int ret = libosePINVOKE.ose_pprintFullBundle_impl(ose_bundle.getCPtr(bundle), buf, buflen, name);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void ose_pprintFullBundle(ose_bundle src, ose_bundle dest, string name) {
    libosePINVOKE.ose_pprintFullBundle(ose_bundle.getCPtr(src), ose_bundle.getCPtr(dest), name);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_pushInt32(ose_bundle B, int v) {
    libosePINVOKE.ose_pushInt32(ose_bundle.getCPtr(B), v);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_pushFloat(ose_bundle B, float v) {
    libosePINVOKE.ose_pushFloat(ose_bundle.getCPtr(B), v);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_pushString(ose_bundle B, string v) {
    libosePINVOKE.ose_pushString(ose_bundle.getCPtr(B), v);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_pushBlob(ose_bundle B, int size, string blob) {
    libosePINVOKE.ose_pushBlob(ose_bundle.getCPtr(B), size, blob);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_pushAlignedPtr(ose_bundle B, SWIGTYPE_p_void v) {
    libosePINVOKE.ose_pushAlignedPtr(ose_bundle.getCPtr(B), SWIGTYPE_p_void.getCPtr(v));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static string ose_peekAddress(ose_bundle B) {
    string ret = libosePINVOKE.ose_peekAddress(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static char ose_peekMessageArgType(ose_bundle B) {
    char ret = libosePINVOKE.ose_peekMessageArgType(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static char ose_peekType(ose_bundle B) {
    char ret = libosePINVOKE.ose_peekType(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ose_peekInt32(ose_bundle B) {
    int ret = libosePINVOKE.ose_peekInt32(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float ose_peekFloat(ose_bundle B) {
    float ret = libosePINVOKE.ose_peekFloat(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string ose_peekString(ose_bundle B) {
    string ret = libosePINVOKE.ose_peekString(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string ose_peekBlob(ose_bundle B) {
    string ret = libosePINVOKE.ose_peekBlob(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void ose_peekAlignedPtr(ose_bundle B) {
    global::System.IntPtr cPtr = libosePINVOKE.ose_peekAlignedPtr(ose_bundle.getCPtr(B));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ose_popInt32(ose_bundle B) {
    int ret = libosePINVOKE.ose_popInt32(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float ose_popFloat(ose_bundle B) {
    float ret = libosePINVOKE.ose_popFloat(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ose_popString(ose_bundle B, string buf) {
    int ret = libosePINVOKE.ose_popString(ose_bundle.getCPtr(B), buf);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ose_popBlob(ose_bundle B, string buf) {
    int ret = libosePINVOKE.ose_popBlob(ose_bundle.getCPtr(B), buf);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void ose_drop(ose_bundle B) {
    libosePINVOKE.ose_drop(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_2drop(ose_bundle B) {
    libosePINVOKE.ose_2drop(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_dup(ose_bundle B) {
    libosePINVOKE.ose_dup(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_2dup(ose_bundle B) {
    libosePINVOKE.ose_2dup(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_nip(ose_bundle B) {
    libosePINVOKE.ose_nip(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_rot(ose_bundle B) {
    libosePINVOKE.ose_rot(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_rrot(ose_bundle B) {
    libosePINVOKE.ose_rrot(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_over(ose_bundle B) {
    libosePINVOKE.ose_over(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_2over(ose_bundle B) {
    libosePINVOKE.ose_2over(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_pick(ose_bundle B) {
    libosePINVOKE.ose_pick(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_roll(ose_bundle B) {
    libosePINVOKE.ose_roll(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_pickBottom(ose_bundle B) {
    libosePINVOKE.ose_pickBottom(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_rollBottom(ose_bundle B) {
    libosePINVOKE.ose_rollBottom(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static int ose_pickMatch_impl(ose_bundle B) {
    int ret = libosePINVOKE.ose_pickMatch_impl(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void ose_pickMatch(ose_bundle B) {
    libosePINVOKE.ose_pickMatch(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static int ose_pickPMatch_impl(ose_bundle B) {
    int ret = libosePINVOKE.ose_pickPMatch_impl(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void ose_pickPMatch(ose_bundle B) {
    libosePINVOKE.ose_pickPMatch(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static int ose_rollMatch_impl(ose_bundle B) {
    int ret = libosePINVOKE.ose_rollMatch_impl(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void ose_rollMatch(ose_bundle B) {
    libosePINVOKE.ose_rollMatch(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static int ose_rollPMatch_impl(ose_bundle B) {
    int ret = libosePINVOKE.ose_rollPMatch_impl(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void ose_swap(ose_bundle B) {
    libosePINVOKE.ose_swap(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_2swap(ose_bundle B) {
    libosePINVOKE.ose_2swap(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_tuck(ose_bundle B) {
    libosePINVOKE.ose_tuck(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_bundleAll(ose_bundle B) {
    libosePINVOKE.ose_bundleAll(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_bundleFromBottom(ose_bundle B) {
    libosePINVOKE.ose_bundleFromBottom(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_bundleFromTop(ose_bundle B) {
    libosePINVOKE.ose_bundleFromTop(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_clear(ose_bundle B) {
    libosePINVOKE.ose_clear(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_pop(ose_bundle B) {
    libosePINVOKE.ose_pop(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_popAll(ose_bundle B) {
    libosePINVOKE.ose_popAll(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_popAllDrop(ose_bundle B) {
    libosePINVOKE.ose_popAllDrop(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_popAllBundle(ose_bundle B) {
    libosePINVOKE.ose_popAllBundle(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_popAllDropBundle(ose_bundle B) {
    libosePINVOKE.ose_popAllDropBundle(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_reverse(ose_bundle B) {
    libosePINVOKE.ose_reverse(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_push(ose_bundle B) {
    libosePINVOKE.ose_push(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_decatenateElemFromEnd(ose_bundle B) {
    libosePINVOKE.ose_decatenateElemFromEnd(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_decatenateElemFromStart(ose_bundle B) {
    libosePINVOKE.ose_decatenateElemFromStart(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_concatenateElems(ose_bundle B) {
    libosePINVOKE.ose_concatenateElems(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_unpack(ose_bundle B) {
    libosePINVOKE.ose_unpack(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_unpackDrop(ose_bundle B) {
    libosePINVOKE.ose_unpackDrop(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_countElems(ose_bundle B) {
    libosePINVOKE.ose_countElems(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_countItems(ose_bundle B) {
    libosePINVOKE.ose_countItems(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_lengthItem(ose_bundle B) {
    libosePINVOKE.ose_lengthItem(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_lengthsItems(ose_bundle B) {
    libosePINVOKE.ose_lengthsItems(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_sizeElem(ose_bundle B) {
    libosePINVOKE.ose_sizeElem(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_sizeItem(ose_bundle B) {
    libosePINVOKE.ose_sizeItem(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_sizesElems(ose_bundle B) {
    libosePINVOKE.ose_sizesElems(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_sizesItems(ose_bundle B) {
    libosePINVOKE.ose_sizesItems(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_getAddresses(ose_bundle B) {
    libosePINVOKE.ose_getAddresses(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_setTimetag(ose_bundle B) {
    libosePINVOKE.ose_setTimetag(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_getTimetag(ose_bundle B) {
    libosePINVOKE.ose_getTimetag(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_getTypetags(ose_bundle B) {
    libosePINVOKE.ose_getTypetags(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_elemIsBundle(ose_bundle B) {
    libosePINVOKE.ose_elemIsBundle(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_typeof0(ose_bundle B) {
    libosePINVOKE.ose_typeof0(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_typeof1(ose_bundle B) {
    libosePINVOKE.ose_typeof1(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_typeof2(ose_bundle B) {
    libosePINVOKE.ose_typeof2(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_setTypetag_impl(ose_bundle B, char typetag) {
    libosePINVOKE.ose_setTypetag_impl(ose_bundle.getCPtr(B), typetag);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_setTypetag(ose_bundle B) {
    libosePINVOKE.ose_setTypetag(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_blobToElem(ose_bundle B) {
    libosePINVOKE.ose_blobToElem(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_blobToType_impl(ose_bundle B, char typetag) {
    libosePINVOKE.ose_blobToType_impl(ose_bundle.getCPtr(B), typetag);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_blobToType(ose_bundle B) {
    libosePINVOKE.ose_blobToType(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_toType(ose_bundle B) {
    libosePINVOKE.ose_toType(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_toInt32(ose_bundle B) {
    libosePINVOKE.ose_toInt32(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_toFloat(ose_bundle B) {
    libosePINVOKE.ose_toFloat(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_toString(ose_bundle B) {
    libosePINVOKE.ose_toString(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_toBlob(ose_bundle B) {
    libosePINVOKE.ose_toBlob(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_appendByte(ose_bundle B) {
    libosePINVOKE.ose_appendByte(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_concatenateBlobs(ose_bundle B) {
    libosePINVOKE.ose_concatenateBlobs(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_concatenateStrings(ose_bundle B) {
    libosePINVOKE.ose_concatenateStrings(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_swapStringToAddress(ose_bundle B) {
    libosePINVOKE.ose_swapStringToAddress(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_moveStringToAddress(ose_bundle B) {
    libosePINVOKE.ose_moveStringToAddress(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_decatenateBlobFromEnd_impl(ose_bundle B, int n) {
    libosePINVOKE.ose_decatenateBlobFromEnd_impl(ose_bundle.getCPtr(B), n);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_decatenateBlobFromEnd(ose_bundle B) {
    libosePINVOKE.ose_decatenateBlobFromEnd(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_decatenateBlobFromStart_impl(ose_bundle B, int n) {
    libosePINVOKE.ose_decatenateBlobFromStart_impl(ose_bundle.getCPtr(B), n);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_decatenateBlobFromStart(ose_bundle B) {
    libosePINVOKE.ose_decatenateBlobFromStart(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_decatenateStringFromEnd_impl(ose_bundle B, int n) {
    libosePINVOKE.ose_decatenateStringFromEnd_impl(ose_bundle.getCPtr(B), n);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_decatenateStringFromEnd(ose_bundle B) {
    libosePINVOKE.ose_decatenateStringFromEnd(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_decatenateStringFromStart_impl(ose_bundle B, int n) {
    libosePINVOKE.ose_decatenateStringFromStart_impl(ose_bundle.getCPtr(B), n);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_decatenateStringFromStart(ose_bundle B) {
    libosePINVOKE.ose_decatenateStringFromStart(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_elemToBlob(ose_bundle B) {
    libosePINVOKE.ose_elemToBlob(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_itemToBlob(ose_bundle B) {
    libosePINVOKE.ose_itemToBlob(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_joinStrings(ose_bundle B) {
    libosePINVOKE.ose_joinStrings(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_splitStringFromEnd(ose_bundle B) {
    libosePINVOKE.ose_splitStringFromEnd(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_splitStringFromStart(ose_bundle B) {
    libosePINVOKE.ose_splitStringFromStart(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_swap4Bytes(ose_bundle B) {
    libosePINVOKE.ose_swap4Bytes(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_swap8Bytes(ose_bundle B) {
    libosePINVOKE.ose_swap8Bytes(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_swapNBytes(ose_bundle B) {
    libosePINVOKE.ose_swapNBytes(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_trimStringEnd(ose_bundle B) {
    libosePINVOKE.ose_trimStringEnd(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_trimStringStart(ose_bundle B) {
    libosePINVOKE.ose_trimStringStart(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_match(ose_bundle B) {
    libosePINVOKE.ose_match(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_pmatch(ose_bundle B) {
    libosePINVOKE.ose_pmatch(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_replace(ose_bundle B) {
    libosePINVOKE.ose_replace(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_assign(ose_bundle B) {
    libosePINVOKE.ose_assign(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_lookup(ose_bundle B) {
    libosePINVOKE.ose_lookup(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_plookup(ose_bundle B) {
    libosePINVOKE.ose_plookup(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_route1(ose_bundle B) {
    libosePINVOKE.ose_route1(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_routeWithDelegation(ose_bundle B) {
    libosePINVOKE.ose_routeWithDelegation(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_select1(ose_bundle B) {
    libosePINVOKE.ose_select1(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_selectWithDelegation(ose_bundle B) {
    libosePINVOKE.ose_selectWithDelegation(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_gather(ose_bundle B) {
    libosePINVOKE.ose_gather(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_nth(ose_bundle B) {
    libosePINVOKE.ose_nth(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_makeBlob(ose_bundle B) {
    libosePINVOKE.ose_makeBlob(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_pushBundle(ose_bundle B) {
    libosePINVOKE.ose_pushBundle(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_add(ose_bundle B) {
    libosePINVOKE.ose_add(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_sub(ose_bundle B) {
    libosePINVOKE.ose_sub(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_mul(ose_bundle B) {
    libosePINVOKE.ose_mul(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_div(ose_bundle B) {
    libosePINVOKE.ose_div(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_mod(ose_bundle B) {
    libosePINVOKE.ose_mod(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_pow(ose_bundle B) {
    libosePINVOKE.ose_pow(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_neg(ose_bundle B) {
    libosePINVOKE.ose_neg(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_eql(ose_bundle B) {
    libosePINVOKE.ose_eql(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_neq(ose_bundle B) {
    libosePINVOKE.ose_neq(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_lte(ose_bundle B) {
    libosePINVOKE.ose_lte(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_lt(ose_bundle B) {
    libosePINVOKE.ose_lt(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_and(ose_bundle B) {
    libosePINVOKE.ose_and(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_or(ose_bundle B) {
    libosePINVOKE.ose_or(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static int ose_pstrlen(string s) {
    int ret = libosePINVOKE.ose_pstrlen(s);
    return ret;
  }

  public static bool ose_isAddressChar(char c) {
    bool ret = libosePINVOKE.ose_isAddressChar(c);
    return ret;
  }

  public static bool ose_isKnownTypetag(char typetag) {
    bool ret = libosePINVOKE.ose_isKnownTypetag(typetag);
    return ret;
  }

  public static bool ose_isStringType(char typetag) {
    bool ret = libosePINVOKE.ose_isStringType(typetag);
    return ret;
  }

  public static bool ose_isIntegerType(char typetag) {
    bool ret = libosePINVOKE.ose_isIntegerType(typetag);
    return ret;
  }

  public static bool ose_isFloatType(char typetag) {
    bool ret = libosePINVOKE.ose_isFloatType(typetag);
    return ret;
  }

  public static bool ose_isNumericType(char typetag) {
    bool ret = libosePINVOKE.ose_isNumericType(typetag);
    return ret;
  }

  public static bool ose_isUnitType(char typetag) {
    bool ret = libosePINVOKE.ose_isUnitType(typetag);
    return ret;
  }

  public static bool ose_isBoolType(char typetag) {
    bool ret = libosePINVOKE.ose_isBoolType(typetag);
    return ret;
  }

  public static bool ose_isBundle(ose_bundle B) {
    bool ret = libosePINVOKE.ose_isBundle(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool ose_bundleIsEmpty(ose_bundle B) {
    bool ret = libosePINVOKE.ose_bundleIsEmpty(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ose_getBundleElemCount(ose_bundle B) {
    int ret = libosePINVOKE.ose_getBundleElemCount(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ose_getBundleElemElemCount(ose_bundle B, int offset) {
    int ret = libosePINVOKE.ose_getBundleElemElemCount(ose_bundle.getCPtr(B), offset);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool ose_bundleHasAtLeastNElems(ose_bundle B, int n) {
    bool ret = libosePINVOKE.ose_bundleHasAtLeastNElems(ose_bundle.getCPtr(B), n);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static char ose_getBundleElemType(ose_bundle B, int offset) {
    char ret = libosePINVOKE.ose_getBundleElemType(ose_bundle.getCPtr(B), offset);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static char ose_readByte(ose_bundle B, int offset) {
    char ret = libosePINVOKE.ose_readByte(ose_bundle.getCPtr(B), offset);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ose_writeByte(ose_bundle B, int offset, char i) {
    int ret = libosePINVOKE.ose_writeByte(ose_bundle.getCPtr(B), offset, i);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ose_readInt32(ose_bundle B, int offset) {
    int ret = libosePINVOKE.ose_readInt32(ose_bundle.getCPtr(B), offset);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ose_writeInt32(ose_bundle B, int offset, int i) {
    int ret = libosePINVOKE.ose_writeInt32(ose_bundle.getCPtr(B), offset, i);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float ose_readFloat(ose_bundle B, int offset) {
    float ret = libosePINVOKE.ose_readFloat(ose_bundle.getCPtr(B), offset);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ose_writeFloat(ose_bundle B, int offset, float f) {
    int ret = libosePINVOKE.ose_writeFloat(ose_bundle.getCPtr(B), offset, f);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string ose_readString(ose_bundle B, int offset) {
    string ret = libosePINVOKE.ose_readString(ose_bundle.getCPtr(B), offset);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ose_getStringLen(ose_bundle B, int offset) {
    int ret = libosePINVOKE.ose_getStringLen(ose_bundle.getCPtr(B), offset);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ose_getPaddedStringLen(ose_bundle B, int offset) {
    int ret = libosePINVOKE.ose_getPaddedStringLen(ose_bundle.getCPtr(B), offset);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ose_writeString(ose_bundle B, int offset, string s, int slen, int slen_padded) {
    int ret = libosePINVOKE.ose_writeString(ose_bundle.getCPtr(B), offset, s, slen, slen_padded);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string ose_readBlob(ose_bundle B, int offset) {
    string ret = libosePINVOKE.ose_readBlob(ose_bundle.getCPtr(B), offset);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ose_readBlobSize(ose_bundle B, int offset) {
    int ret = libosePINVOKE.ose_readBlobSize(ose_bundle.getCPtr(B), offset);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ose_getBlobPaddingForNBytes(int n) {
    int ret = libosePINVOKE.ose_getBlobPaddingForNBytes(n);
    return ret;
  }

  public static int ose_getPaddedBlobSize(ose_bundle B, int offset) {
    int ret = libosePINVOKE.ose_getPaddedBlobSize(ose_bundle.getCPtr(B), offset);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string ose_readBlobPayload(ose_bundle B, int offset) {
    string ret = libosePINVOKE.ose_readBlobPayload(ose_bundle.getCPtr(B), offset);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ose_writeBlob(ose_bundle B, int offset, int blobsize, string blob) {
    int ret = libosePINVOKE.ose_writeBlob(ose_bundle.getCPtr(B), offset, blobsize, blob);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ose_timetag ose_readTimetag(ose_bundle B, int offset) {
    ose_timetag ret = new ose_timetag(libosePINVOKE.ose_readTimetag(ose_bundle.getCPtr(B), offset), true);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ose_writeTimetag(ose_bundle B, int offset, uint sec, uint fsec) {
    int ret = libosePINVOKE.ose_writeTimetag(ose_bundle.getCPtr(B), offset, sec, fsec);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_void ose_readAlignedPtr(ose_bundle B, int offset) {
    global::System.IntPtr cPtr = libosePINVOKE.ose_readAlignedPtr(ose_bundle.getCPtr(B), offset);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ose_writeAlignedPtr(ose_bundle B, int offset, SWIGTYPE_p_void ptr) {
    int ret = libosePINVOKE.ose_writeAlignedPtr(ose_bundle.getCPtr(B), offset, SWIGTYPE_p_void.getCPtr(ptr));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void ose_alignPtr(ose_bundle B, int offset) {
    libosePINVOKE.ose_alignPtr(ose_bundle.getCPtr(B), offset);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_dropAtOffset(ose_bundle B, int offset) {
    libosePINVOKE.ose_dropAtOffset(ose_bundle.getCPtr(B), offset);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static int ose_getLastBundleElemOffset(ose_bundle B) {
    int ret = libosePINVOKE.ose_getLastBundleElemOffset(ose_bundle.getCPtr(B));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ose_getBundleElemAddressOffset(ose_bundle B, int elemoffset) {
    int ret = libosePINVOKE.ose_getBundleElemAddressOffset(ose_bundle.getCPtr(B), elemoffset);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ose_getBundleElemTTOffset(ose_bundle B, int elemoffset) {
    int ret = libosePINVOKE.ose_getBundleElemTTOffset(ose_bundle.getCPtr(B), elemoffset);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ose_getBundleElemPayloadOffset(ose_bundle B, int elemoffset) {
    int ret = libosePINVOKE.ose_getBundleElemPayloadOffset(ose_bundle.getCPtr(B), elemoffset);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ose_getFirstOffsetForMatch(ose_bundle B, string addr) {
    int ret = libosePINVOKE.ose_getFirstOffsetForMatch(ose_bundle.getCPtr(B), addr);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ose_getFirstOffsetForPMatch(ose_bundle B, string addr) {
    int ret = libosePINVOKE.ose_getFirstOffsetForPMatch(ose_bundle.getCPtr(B), addr);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ose_getFirstOffsetForFullPMatch(ose_bundle B, string addr) {
    int ret = libosePINVOKE.ose_getFirstOffsetForFullPMatch(ose_bundle.getCPtr(B), addr);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ose_getPayloadItemSize_hook(ose_bundle B, char typetag, int msg_offset, int item_offset) {
    int ret = libosePINVOKE.ose_getPayloadItemSize_hook(ose_bundle.getCPtr(B), typetag, msg_offset, item_offset);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ose_getPayloadItemSize(ose_bundle B, char typetag, int msg_offset, int item_offset) {
    int ret = libosePINVOKE.ose_getPayloadItemSize(ose_bundle.getCPtr(B), typetag, msg_offset, item_offset);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ose_getPayloadItemLength_hook(ose_bundle B, char typetag, int msg_offset, int item_offset) {
    int ret = libosePINVOKE.ose_getPayloadItemLength_hook(ose_bundle.getCPtr(B), typetag, msg_offset, item_offset);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ose_getPayloadItemLength(ose_bundle B, char typetag, int msg_offset, int item_offset) {
    int ret = libosePINVOKE.ose_getPayloadItemLength(ose_bundle.getCPtr(B), typetag, msg_offset, item_offset);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void ose_getNthPayloadItem(ose_bundle B, int n, int msg_offset, SWIGTYPE_p_int typetags_offset, SWIGTYPE_p_int num_typetags, SWIGTYPE_p_int last_typetag_offset, SWIGTYPE_p_int payload_offset, SWIGTYPE_p_int last_payload_item_offset) {
    libosePINVOKE.ose_getNthPayloadItem(ose_bundle.getCPtr(B), n, msg_offset, SWIGTYPE_p_int.getCPtr(typetags_offset), SWIGTYPE_p_int.getCPtr(num_typetags), SWIGTYPE_p_int.getCPtr(last_typetag_offset), SWIGTYPE_p_int.getCPtr(payload_offset), SWIGTYPE_p_int.getCPtr(last_payload_item_offset));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static int ose_printTypeof0(ose_bundle B, int offset, string buf, int buflen) {
    int ret = libosePINVOKE.ose_printTypeof0(ose_bundle.getCPtr(B), offset, buf, buflen);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ose_printTypeof1(ose_bundle B, int offset, string buf, int buflen) {
    int ret = libosePINVOKE.ose_printTypeof1(ose_bundle.getCPtr(B), offset, buf, buflen);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ose_printTypeof2(ose_bundle B, int offset, string buf, int buflen) {
    int ret = libosePINVOKE.ose_printTypeof2(ose_bundle.getCPtr(B), offset, buf, buflen);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ose_typechk0(ose_bundle B, string pattern) {
    int ret = libosePINVOKE.ose_typechk0(ose_bundle.getCPtr(B), pattern);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ose_typechk1(ose_bundle B, string pattern) {
    int ret = libosePINVOKE.ose_typechk1(ose_bundle.getCPtr(B), pattern);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int ose_typechk2(ose_bundle B, string pattern) {
    int ret = libosePINVOKE.ose_typechk2(ose_bundle.getCPtr(B), pattern);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ose_SLIPBuf ose_initSLIPBuf(SWIGTYPE_p_unsigned_char buf, int buflen) {
    ose_SLIPBuf ret = new ose_SLIPBuf(libosePINVOKE.ose_initSLIPBuf(SWIGTYPE_p_unsigned_char.getCPtr(buf), buflen), true);
    return ret;
  }

  public static int ose_SLIPDecode(byte c, ose_SLIPBuf s) {
    int ret = libosePINVOKE.ose_SLIPDecode(c, ose_SLIPBuf.getCPtr(s));
    return ret;
  }

  public static int ose_SLIPEncode(SWIGTYPE_p_unsigned_char src, int srclen, SWIGTYPE_p_unsigned_char dest, int destlen) {
    int ret = libosePINVOKE.ose_SLIPEncode(SWIGTYPE_p_unsigned_char.getCPtr(src), srclen, SWIGTYPE_p_unsigned_char.getCPtr(dest), destlen);
    return ret;
  }

  public static ose_bundle osevm_init(ose_bundle bundle) {
    ose_bundle ret = new ose_bundle(libosePINVOKE.osevm_init(ose_bundle.getCPtr(bundle)), true);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void osevm_respondToString(ose_bundle osevm) {
    libosePINVOKE.osevm_respondToString(ose_bundle.getCPtr(osevm));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void osevm_preInput(ose_bundle osevm) {
    libosePINVOKE.osevm_preInput(ose_bundle.getCPtr(osevm));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void osevm_postInput(ose_bundle osevm) {
    libosePINVOKE.osevm_postInput(ose_bundle.getCPtr(osevm));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void osevm_popInputToControl(ose_bundle osevm) {
    libosePINVOKE.osevm_popInputToControl(ose_bundle.getCPtr(osevm));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void osevm_postControl(ose_bundle osevm) {
    libosePINVOKE.osevm_postControl(ose_bundle.getCPtr(osevm));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void osevm_evalType(ose_bundle osevm) {
    libosePINVOKE.osevm_evalType(ose_bundle.getCPtr(osevm));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static int osevm_callTypeHook(ose_bundle bundle, char typetag, int msg_offset, int item_offset, int addrlen, string addr) {
    int ret = libosePINVOKE.osevm_callTypeHook(ose_bundle.getCPtr(bundle), typetag, msg_offset, item_offset, addrlen, addr);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int osevm_getPayloadItemLength_hook(ose_bundle bundle, char typetag, int msg_offset, int item_offset) {
    int ret = libosePINVOKE.osevm_getPayloadItemLength_hook(ose_bundle.getCPtr(bundle), typetag, msg_offset, item_offset);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int osevm_getPayloadItemSize_hook(ose_bundle bundle, char typetag, int msg_offset, int item_offset) {
    int ret = libosePINVOKE.osevm_getPayloadItemSize_hook(ose_bundle.getCPtr(bundle), typetag, msg_offset, item_offset);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int osevm_pprintPayloadItem_hook(ose_bundle bundle, char typetag, int msg_offset, int item_offset) {
    int ret = libosePINVOKE.osevm_pprintPayloadItem_hook(ose_bundle.getCPtr(bundle), typetag, msg_offset, item_offset);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void osevm_inputMessages(ose_bundle osevm, int size, string bundle) {
    libosePINVOKE.osevm_inputMessages(ose_bundle.getCPtr(osevm), size, bundle);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void osevm_inputMessage(ose_bundle osevm, int size, string message) {
    libosePINVOKE.osevm_inputMessage(ose_bundle.getCPtr(osevm), size, message);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void osevm_run(ose_bundle bundle) {
    libosePINVOKE.osevm_run(ose_bundle.getCPtr(bundle));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static char osevm_step(ose_bundle osevm) {
    char ret = libosePINVOKE.osevm_step(ose_bundle.getCPtr(osevm));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int osevm_computeSizeReqs(int n) {
    int ret = libosePINVOKE.osevm_computeSizeReqs(n);
    return ret;
  }

  public static void osevm_exec1(ose_bundle osevm) {
    libosePINVOKE.osevm_exec1(ose_bundle.getCPtr(osevm));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void osevm_exec2(ose_bundle osevm) {
    libosePINVOKE.osevm_exec2(ose_bundle.getCPtr(osevm));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void osevm_exec3(ose_bundle osevm) {
    libosePINVOKE.osevm_exec3(ose_bundle.getCPtr(osevm));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void osevm_exec(ose_bundle osevm) {
    libosePINVOKE.osevm_exec(ose_bundle.getCPtr(osevm));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void osevm_if(ose_bundle osevm) {
    libosePINVOKE.osevm_if(ose_bundle.getCPtr(osevm));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void osevm_dotimes(ose_bundle osevm) {
    libosePINVOKE.osevm_dotimes(ose_bundle.getCPtr(osevm));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void osevm_copyRegisterToElem(ose_bundle osevm) {
    libosePINVOKE.osevm_copyRegisterToElem(ose_bundle.getCPtr(osevm));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void osevm_appendElemToRegister(ose_bundle osevm) {
    libosePINVOKE.osevm_appendElemToRegister(ose_bundle.getCPtr(osevm));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void osevm_replaceRegisterWithElem(ose_bundle osevm) {
    libosePINVOKE.osevm_replaceRegisterWithElem(ose_bundle.getCPtr(osevm));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void osevm_moveElemToRegister(ose_bundle osevm) {
    libosePINVOKE.osevm_moveElemToRegister(ose_bundle.getCPtr(osevm));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void osevm_copyElemToRegister(ose_bundle osevm) {
    libosePINVOKE.osevm_copyElemToRegister(ose_bundle.getCPtr(osevm));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void osevm_apply(ose_bundle osevm) {
    libosePINVOKE.osevm_apply(ose_bundle.getCPtr(osevm));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void osevm_map(ose_bundle osevm) {
    libosePINVOKE.osevm_map(ose_bundle.getCPtr(osevm));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void osevm_return(ose_bundle osevm) {
    libosePINVOKE.osevm_return(ose_bundle.getCPtr(osevm));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void osevm_version(ose_bundle osevm) {
    libosePINVOKE.osevm_version(ose_bundle.getCPtr(osevm));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void osevm_assignStackToRegister(ose_bundle osevm) {
    libosePINVOKE.osevm_assignStackToRegister(ose_bundle.getCPtr(osevm));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void osevm_assignStackToEnv_impl(ose_bundle osevm, ose_bundle env, int replace, int new_msg_first, char bundle_typetag) {
    libosePINVOKE.osevm_assignStackToEnv_impl(ose_bundle.getCPtr(osevm), ose_bundle.getCPtr(env), replace, new_msg_first, bundle_typetag);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void osevm_assignStackToEnv(ose_bundle osevm) {
    libosePINVOKE.osevm_assignStackToEnv(ose_bundle.getCPtr(osevm));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void osevm_lookupInEnv_impl(ose_bundle osevm) {
    libosePINVOKE.osevm_lookupInEnv_impl(ose_bundle.getCPtr(osevm));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void osevm_lookupInEnv(ose_bundle osevm) {
    libosePINVOKE.osevm_lookupInEnv(ose_bundle.getCPtr(osevm));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void osevm_plookupInEnv_impl(ose_bundle osevm) {
    libosePINVOKE.osevm_plookupInEnv_impl(ose_bundle.getCPtr(osevm));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void osevm_plookupInEnv(ose_bundle osevm) {
    libosePINVOKE.osevm_plookupInEnv(ose_bundle.getCPtr(osevm));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void osevm_funcall(ose_bundle osevm) {
    libosePINVOKE.osevm_funcall(ose_bundle.getCPtr(osevm));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void osevm_makeRegister(ose_bundle osevm) {
    libosePINVOKE.osevm_makeRegister(ose_bundle.getCPtr(osevm));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void osevm_quote(ose_bundle bundle) {
    libosePINVOKE.osevm_quote(ose_bundle.getCPtr(bundle));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void osevm_toType(ose_bundle bundle) {
    libosePINVOKE.osevm_toType(ose_bundle.getCPtr(bundle));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void osevm_toInt32(ose_bundle bundle) {
    libosePINVOKE.osevm_toInt32(ose_bundle.getCPtr(bundle));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void osevm_toFloat(ose_bundle bundle) {
    libosePINVOKE.osevm_toFloat(ose_bundle.getCPtr(bundle));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void osevm_toString(ose_bundle bundle) {
    libosePINVOKE.osevm_toString(ose_bundle.getCPtr(bundle));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void osevm_toBlob(ose_bundle bundle) {
    libosePINVOKE.osevm_toBlob(ose_bundle.getCPtr(bundle));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void osevm_appendByte(ose_bundle bundle) {
    libosePINVOKE.osevm_appendByte(ose_bundle.getCPtr(bundle));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_void getself(ose_bundle osevm) {
    global::System.IntPtr cPtr = libosePINVOKE.getself(ose_bundle.getCPtr(osevm));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void ose_bindAlignedPtr(ose_bundle B, string addr, int addrlen, SWIGTYPE_p_void ptr) {
    libosePINVOKE.ose_bindAlignedPtr(ose_bundle.getCPtr(B), addr, addrlen, SWIGTYPE_p_void.getCPtr(ptr));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_println_wrapper(ose_bundle osevm) {
    libosePINVOKE.ose_println_wrapper(ose_bundle.getCPtr(osevm));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void ose_sendto_wrapper(ose_bundle osevm) {
    libosePINVOKE.ose_sendto_wrapper(ose_bundle.getCPtr(osevm));
    if (libosePINVOKE.SWIGPendingException.Pending) throw libosePINVOKE.SWIGPendingException.Retrieve();
  }

  public static _OSECsharpBase_wrappertab OSECsharpBase_wrappertab {
    get {
      global::System.IntPtr cPtr = libosePINVOKE.OSECsharpBase_wrappertab_get();
      _OSECsharpBase_wrappertab ret = (cPtr == global::System.IntPtr.Zero) ? null : new _OSECsharpBase_wrappertab(cPtr, false);
      return ret;
    } 
  }

  public static readonly int OSE_CONF_VM_INPUT_SIZE = libosePINVOKE.OSE_CONF_VM_INPUT_SIZE_get();
  public static readonly int OSE_CONF_VM_STACK_SIZE = libosePINVOKE.OSE_CONF_VM_STACK_SIZE_get();
  public static readonly int OSE_CONF_VM_ENV_SIZE = libosePINVOKE.OSE_CONF_VM_ENV_SIZE_get();
  public static readonly int OSE_CONF_VM_CONTROL_SIZE = libosePINVOKE.OSE_CONF_VM_CONTROL_SIZE_get();
  public static readonly int OSE_CONF_VM_DUMP_SIZE = libosePINVOKE.OSE_CONF_VM_DUMP_SIZE_get();
  public static readonly string OSE_BUNDLE_ID_ = libosePINVOKE.OSE_BUNDLE_ID__get();
  public static readonly int OSE_BUNDLE_ID_LEN_ = libosePINVOKE.OSE_BUNDLE_ID_LEN__get();
  public static readonly string OSE_TIMETAG_NULL_ = libosePINVOKE.OSE_TIMETAG_NULL__get();
  public static readonly int OSE_TIMETAG_LEN_ = libosePINVOKE.OSE_TIMETAG_LEN__get();
  public static readonly string OSE_EMPTY_TYPETAG_STRING_ = libosePINVOKE.OSE_EMPTY_TYPETAG_STRING__get();
  public static readonly string OSE_ADDRESS_ANONVAL_ = libosePINVOKE.OSE_ADDRESS_ANONVAL__get();
  public static readonly string OSE_PPRINTPAYLOADITEM_ADDR_ = libosePINVOKE.OSE_PPRINTPAYLOADITEM_ADDR__get();
  public static readonly string OSE_GETPAYLOADITEMLENGTH_ADDR_ = libosePINVOKE.OSE_GETPAYLOADITEMLENGTH_ADDR__get();
  public static readonly string OSE_GETPAYLOADITEMSIZE_ADDR_ = libosePINVOKE.OSE_GETPAYLOADITEMSIZE_ADDR__get();
  public static readonly int OSE_CONTEXT_ALIGNMENT = libosePINVOKE.OSE_CONTEXT_ALIGNMENT_get();
  public static readonly int OSE_CONTEXT_BUNDLE_SIZE_OFFSET = libosePINVOKE.OSE_CONTEXT_BUNDLE_SIZE_OFFSET_get();
  public static readonly int OSE_CONTEXT_TOTAL_SIZE_OFFSET = libosePINVOKE.OSE_CONTEXT_TOTAL_SIZE_OFFSET_get();
  public static readonly int OSE_CONTEXT_PARENT_BUNDLE_OFFSET_OFFSET = libosePINVOKE.OSE_CONTEXT_PARENT_BUNDLE_OFFSET_OFFSET_get();
  public static readonly int OSE_CONTEXT_STATUS_OFFSET = libosePINVOKE.OSE_CONTEXT_STATUS_OFFSET_get();
  public static readonly int OSE_CONTEXT_MEMUSAGE_OFFSET = libosePINVOKE.OSE_CONTEXT_MEMUSAGE_OFFSET_get();
  public static readonly int OSE_CONTEXT_BUNDLE_OFFSET = libosePINVOKE.OSE_CONTEXT_BUNDLE_OFFSET_get();
  public static readonly int OSE_CONTEXT_STATUS_MESSAGE_SIZE = libosePINVOKE.OSE_CONTEXT_STATUS_MESSAGE_SIZE_get();
  public static readonly int OSE_MATCH_BACKTRACK_LIMIT = libosePINVOKE.OSE_MATCH_BACKTRACK_LIMIT_get();
  public static readonly int OSE_MATCH_ENABLE_2STARS = libosePINVOKE.OSE_MATCH_ENABLE_2STARS_get();
  public static readonly int OSE_MATCH_ENABLE_NSTARS = libosePINVOKE.OSE_MATCH_ENABLE_NSTARS_get();
  public static readonly int OSE_SLIP_END = libosePINVOKE.OSE_SLIP_END_get();
  public static readonly int OSE_SLIP_ESC = libosePINVOKE.OSE_SLIP_ESC_get();
  public static readonly int OSE_SLIP_ESC_END = libosePINVOKE.OSE_SLIP_ESC_END_get();
  public static readonly int OSE_SLIP_ESC_ESC = libosePINVOKE.OSE_SLIP_ESC_ESC_get();
  public static readonly string OSEVM_ADDR_INPUT = libosePINVOKE.OSEVM_ADDR_INPUT_get();
  public static readonly string OSEVM_ADDR_STACK = libosePINVOKE.OSEVM_ADDR_STACK_get();
  public static readonly string OSEVM_ADDR_ENV = libosePINVOKE.OSEVM_ADDR_ENV_get();
  public static readonly string OSEVM_ADDR_CONTROL = libosePINVOKE.OSEVM_ADDR_CONTROL_get();
  public static readonly string OSEVM_ADDR_DUMP = libosePINVOKE.OSEVM_ADDR_DUMP_get();
  public static readonly string OSEVM_ADDR_STDLIB = libosePINVOKE.OSEVM_ADDR_STDLIB_get();
  public static readonly string OSEVM_ADDR_HOST = libosePINVOKE.OSEVM_ADDR_HOST_get();
  public static readonly string OSEVM_ADDR_CACHE = libosePINVOKE.OSEVM_ADDR_CACHE_get();
  public static readonly string OSEVM_ADDR_assign = libosePINVOKE.OSEVM_ADDR_assign_get();
  public static readonly string OSEVM_ADDR_quote = libosePINVOKE.OSEVM_ADDR_quote_get();
  public static readonly string OSEVM_ADDR_funcall = libosePINVOKE.OSEVM_ADDR_funcall_get();
  public static readonly string OSEVM_ADDR_lookup = libosePINVOKE.OSEVM_ADDR_lookup_get();
  public static readonly string OSEVM_ADDR_copyRegisterToElem = libosePINVOKE.OSEVM_ADDR_copyRegisterToElem_get();
  public static readonly string OSEVM_ADDR_appendElemToRegister = libosePINVOKE.OSEVM_ADDR_appendElemToRegister_get();
  public static readonly string OSEVM_ADDR_replaceRegisterWithElem = libosePINVOKE.OSEVM_ADDR_replaceRegisterWithElem_get();
  public static readonly string OSEVM_ADDR_moveElemToRegister = libosePINVOKE.OSEVM_ADDR_moveElemToRegister_get();
  public static readonly string OSEVM_ADDR_toType = libosePINVOKE.OSEVM_ADDR_toType_get();
  public static readonly string OSEVM_ADDR_toInt32 = libosePINVOKE.OSEVM_ADDR_toInt32_get();
  public static readonly string OSEVM_ADDR_toFloat = libosePINVOKE.OSEVM_ADDR_toFloat_get();
  public static readonly string OSEVM_ADDR_toString = libosePINVOKE.OSEVM_ADDR_toString_get();
  public static readonly string OSEVM_ADDR_toBlob = libosePINVOKE.OSEVM_ADDR_toBlob_get();
  public static readonly string OSEVM_ADDR_appendByte = libosePINVOKE.OSEVM_ADDR_appendByte_get();
  public static readonly int OSEVM_CACHE_SIZE = libosePINVOKE.OSEVM_CACHE_SIZE_get();
  public static readonly string OSEVM_EVALTYPE_ADDR = libosePINVOKE.OSEVM_EVALTYPE_ADDR_get();
}
